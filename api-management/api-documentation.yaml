openapi: '3.0.0'
info:
  version: 1.0.0
  title: Documentation API du projet money
  description: Décrit la structure de l'API du projet money de l'équipe NALT
servers:
    - url: http://localhost:3000/api
      description: Serveur de développement de l'API
paths:
  # route /auth
  /authenticate:
    # request post for the path /login
    post:
      summary: Se connecter à l'API.
      tags:
        - Authentifiation
      description: Se connecter avec un login et mot de passe.
      requestBody: # specification of the request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                motDePasse:
                  type: string
                  format: password

      responses:
        '200':
          $ref: '#/components/responses/Success'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  # route /utilisateurs
  /utilisateurs:
    # request get for the path /utilisateurs
    get:
      summary: Récupère la liste de tous les utilisateurs
      security:
        - bearerAuth: []
      tags:
        - Utilisateurs
      description: Retourne la liste des utilisateurs avec l'id, le nom, le prenom, le login, la ville, le code postal et la date de création
      responses:
        '200':
          $ref: '#/components/schemas/Success'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    # request post for the path /utilisateurs
    post:
      summary: Créé un nouvel utilisateur.
      security:
        - bearerAuth: []
      tags:
        - Utilisateurs
      description: Créé un nouvel utilisateur avec le nom, le prenom, le mot de passe, la ville et le code postal.
      requestBody: # specification of the request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nomUtilisateur:
                  type: string
                prenomUtilisateur:
                  type: string
                motDePasse:
                  type: string
                  format: password
                ville:
                  type: string
                codePostal: 
                  type: string
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '409':
          $ref: '#/components/responses/ConflictError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /utilisateurs/{idUtilisateur}:
    # request get fot the path /utilisateurs/{idUtilisateur}
    get:
      summary: Récupère un utilisateur par son id.
      security:
        - bearerAuth: []
      tags:
        - Utilisateurs
      description: Récupère un utilisateur avec l'id, le nom, le prenom, le login, la ville et le code postal.
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    # request put for the path /utilisateurs/{idUtilisateur}
    put:
      summary: Met à jour les informations d'un utilisateur.
      security:
        - bearerAuth: []
      tags:
        - Utilisateurs
      description: Met à jour plusieurs informations d'un utilisateur comme le nom, le prenom, le mot de passe, le login, la ville et le code postal.

      requestBody: # specification of the request body
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                nomUtilisateur:
                  type: string
                prenomUtilisateur:
                  type: string
                motdepasse:
                  type: string
                  format: password
                ville:
                  type: string
                codePostal: 
                  type: string

      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  
    #request patch for the path /utilisateurs/{idUtilisateur}
    patch:
      summary: Met à jour partiellement les informations d'un utilisateur.
      security:
        - bearerAuth: []
      tags:
        - Utilisateurs
      description: Met à jour partiellement les informations d'un utilisateur comme le nom, le prenom, le mot de passe, le login, la ville et le code postal.
      parameters: # parameters for the query
        - name: idUtilisateur
          description: Id de l'utilisateur
          in: path
          required: true
          schema:
            type: integer

      requestBody: # specification of the request body
        required: false
        content:
          application/json:
            schema:
              type: object
            properties:
                nomUtilisateur:
                  type: string
                prenomUtilisateur:
                  type: string
                motdepasse:
                  type: string
                  format: password
                ville:
                  type: string
                codePostal: 
                  type: string
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    # request delete for the path /utilisateurs/{idUtilisateur}
    delete:
      summary: Supprime un utilisateur par son id
      security:
        - bearerAuth: []
      tags:
        - Utilisateurs
      description: Met à jour partiellement les informations d'un utilisateur comme le nom, le prenom, le mot de passe, le login, la ville et le code postal.
      parameters: # parameters for the query
        - name: idUtilisateur
          description: Id de l'utilisateur
          in: path
          required: true
          schema:
            type: integer

      responses:
        '200':
          $ref: '#/components/responses/Success'
        '204':
          $ref: '#/components/responses/NoContent'
        '303':
          $ref: '#/components/responses/SeeOther'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
  # subroute /comptes
  /comptes:
    # request get for the path /comptes
    get:
      summary: Récupère la liste des comptes d'un utilisateur

      security:
        - bearerAuth: []
      tags:
        - Comptes
      description: Récupère tous les comptes liées à cet utilisateur
      
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    # request post for the path /comptes
    post:
      summary: Créé un nouveau compte pour un utilisateur.
    
      security:
        - bearerAuth: []
      tags:
        - Comptes
      description: Créé un nouveau compte pour un utilisateur avec les champs descriptionCompte, nomBanque, soldeInitial et dernierSolde.
      requestBody: # specification of the request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                descriptionCompte:
                  type: string
                nomBanque:
                  type: string
                soldeInitial:
                  type: number
                dernierSolde:
                  type: number
                  
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '409':
          $ref: '#/components/responses/ConflictError'
        '500':
          $ref: '#/components/responses/InternalServerError'


  /comptes/{idCompte}:
    # request get for the path /comptes/{idCompte}
    get:
      summary: Récupère les information sur le compte d'un utilisateur
      parameters: # parameters for the query
        - name: idCompte
          description: Id du compte
          in: path
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      tags:
        - Comptes
      description: Récupère l'ensemble des informations sur le compte d'un utilisateur (idCompte, descriptionCompte, nomBanque, idUtilisateur, dateHeureCreation,dateHeureMAJ,soldeInitial et dernierSolde).
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    # request put for the path /comptes/{idCompte}
    put:
      summary: Met à jour les informations d'un compte utilisateur.
      security:
        - bearerAuth: []
      tags:
        - Comptes
      description: Met à jour les informations d'un compte utilisateur (descriptionCompte, nomBanque, soldeInitial et dernierSolde).
      parameters: # parameters for the query
        - name: idCompte
          description: Id du compte
          in: path
          required: true
          schema:
            type: integer

      requestBody: # specification of the request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                descriptionCompte:
                  type: string
                nomBanque:
                  type: string
                soldeInitial:
                  type: number
                dernierSolde:
                  type: number
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    # request patch for the path /comptes
    patch:
      summary: Met à jour partiellement les informations d'un compte utilisateur.
      security:
        - bearerAuth: []
      tags:
        - Comptes
      description: Met à jour partiellement les informations d'un compte utilisateur (descriptionCompte, nomBanque, soldeInitial et dernierSolde).
      parameters: # parameters for the query      
        - name: idCompte
          description: Id du compte
          in: path
          required: true
          schema:
            type: integer

      requestBody: # specification of the request body
        required: true
        content:
          application/json:
            schema:
              type: object
            properties:
                descriptionCompte:
                  type: string
                nomBanque:
                  type: string
                soldeInitial:
                  type: number
                dernierSolde:
                  type: number
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    # request delete for the path /comptes/{idCompte}
    delete:
      summary: Supprime un compte utilisateur.
      security:
        - bearerAuth: []
      tags:
        - Comptes
      description: Supprime un compte utilisateur de la base de donnée grâce à son id.
      parameters: # parameters for the query
        - name: idCompte
          description: Id du compte
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '204':
          '$ref': '#/components/responses/NoContent'
        '303':
          $ref: '#/components/responses/SeeOther'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '500':
          $ref: '#/components/responses/InternalServerError'

###################################Mouvements##################################

  /mouvements:
    # request get for the path /mouvements
    get:
      summary: Récupère la liste des mouvements d'un utilisateur.
      security:
        - bearerAuth: []
      tags:
        - Mouvements
      description: Récupère tous les mouvements liées à cet utilisateur.
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    # request post for the path /mouvements
    post:
      summary: Crée un nouveau mouvement pour un utilisateur.
      security:
        - bearerAuth: []
      tags:
        - Mouvements
      description: Crée un nouveau mouvement pour un utilisateur avec les champs idCompte, IdTiers, IdCategorie, idSousCategorie, typeMouvement, idVirement et le montant
      requestBody: # specification of the request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                typeMouvement:
                  type: string
                montant:
                  type: number
                dateMouvement:
                  type: string
                  format: date
                idCompte:
                  type: integer
                idTiers:
                  type: integer
                idCategorie:
                  type: integer
                idSousCategorie:
                  type: integer
                idVirement:
                  type: integer
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /mouvements/{idMouvement}:
    # request get for the path /mouvements/{idMouvement}
    get:
      summary: Récupère un mouvement par son id.
      security:
        - bearerAuth: []
      tags:
        - Mouvements
      description: Récupère un mouvement avec l'id, idCompte, IdTiers, IdCategorie, idSousCategorie, le typeMouvement, le montant, la dateHeureCreation et la dateHeureMAJ.
      parameters: # parameters for the query
        - name: idMouvement
          description: Id du mouvement.
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    # request patch for the path /mouvements/{idMouvement}
    patch:
      summary: Met à jour partiellement un mouvement.
      security:
        - bearerAuth: []
      tags:
        - Mouvements
      description: Met à jour partiellement un mouvement avec les champs idCompte, IdTiers, IdCategorie, idSousCategorie, typeMouvement, montant, dateHeureCreation et dateHeureMAJ.
      parameters: # parameters for the query
        - name: idMouvement
          description: Id du mouvement.
          in: path
          required: true
          schema:
            type: integer
      requestBody: # specification of the request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                dateMouvement:
                  type: string
                  format: date
                idCategorie:
                  type: integer
                idSousCategorie:
                  type: integer
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    # request delete for the path /mouvements/{idMouvement}
    delete:
      summary: Supprime un mouvement.
      security:
        - bearerAuth: []
      tags:
        - Mouvements
      description: Supprime un mouvement de la base de donnée grâce à son id.
      parameters: # parameters for the query
        - name: idMouvement
          description: Id du mouvement.
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '204':
          '$ref': '#/components/responses/NoContent'
        '303':
          $ref: '#/components/responses/SeeOther'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /comptes/{idCompte}/mouvements:
    # request get for the path /comptes/{idCompte}/mouvements
    get:
      summary: Récupère la liste des mouvements d'un compte utilisateur.
      security:
        - bearerAuth: []
      tags:
        - Mouvements d'un compte
      description: Récupère tous les mouvements liées à ce compte utilisateur.
      parameters: # parameters for the query
        - name: idCompte
          description: Id du compte.
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '500':
          $ref: '#/components/responses/InternalServerError' 
          
    /comptes/{idCompte}/mouvements:
    # request post for the path /comptes/{idCompte}/mouvements
    post:
      summary: Crée un mouvement d'un compte d'utilisateur.
      security:
        - bearerAuth: []
      tags:
        - Mouvements d'un compte
      description:  Crée un mouvement d'un compte d'utilisateur avec les champs typeMouvement, montant, dateMouvement, idCompte, idTiers, idCategorie et idSousCategorie.
      parameters: # parameters for the query
        - name: idCompte
          description: Id du compte.
          in: path
          required: true
          schema:
            type: integer
          content:
            application/json:
            schema:
              type: object
              properties:
                typeMouvement:
                  type: string
                montant:
                  type: number
                dateMouvement:
                  type: date
                idCompte:
                  type: integer
                idTiers:
                  type: integer
                idCategorie:
                  type: integer
                idSousCategorie:
                  type: integer

      responses:
        '200':
          $ref: '#/components/responses/Success'
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '500':
          $ref: '#/components/responses/InternalServerError'


##################################TIERS##################################
  /tiers:
    #resquest get for the path /tiers
    get:
      summary: Récupère la liste des tiers d'un utilisateur.
      security:
        - bearerAuth: []
      tags:
        - Tiers
      description: Récupère tous les tiers liés à cet utilisateur.
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    # request post for the path /tiers
    post:
      summary: Crée un nouveau tiers pour un utilisateur.
      security:
        - bearerAuth: []
      tags:
        - Tiers
      description: Crée un nouveau tiers pour un utilisateur avec les champs idUtilisateur et nomTiers
      requestBody: # specification of the request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nomTiers:
                  type: string
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '409': 
          $ref: '#/components/responses/ConflictError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /tiers/{idTiers}:
    # request get for the path /tiers/{idTiers}
    get:
      summary: Récupère un tiers par son id.
      security:
        - bearerAuth: []
      tags:
        - Tiers
      description: Récupère un tiers avec l'id, nomTiers, dateHeureCreation et dateHeureMAJ
      parameters: # parameters for the query
      
        - name: idTiers
          description: Id du tiers.
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    # request put for the path /tiers/{idTiers}
    put:
      summary: Met à jour un tiers.
      security:
        - bearerAuth: []
      tags:
        - Tiers
      description: Met à jour un tiers avec le champ nomTiers
      parameters: # parameters for the query
        - name: idTiers
          description: Id du tiers.
          in: path
          required: true
          schema:
            type: integer
      requestBody: # specification of the request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nomTiers:
                  type: string
        responses:
          '200':
            $ref: '#/components/responses/Success'
          '400':
            $ref: '#/components/responses/BadRequestError'
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '403':
            $ref: '#/components/responses/ForbiddenError'
          '404':
            $ref: '#/components/responses/NotFoundError'
          '406':
            $ref: '#/components/responses/NotAcceptableError'
          '500':
            $ref: '#/components/responses/InternalServerError'
    
    # request delete for the path /tiers/{idTiers}
    delete:
      summary: Supprime un tiers.
      security:
        - bearerAuth: []
      tags:
        - Tiers
      description: Supprime un tiers de la base de donnée grâce à son id.
      parameters: # parameters for the query
        - name: idTiers
          description: Id du tiers.
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '204':
          '$ref': '#/components/responses/NoContent'
        '303':
          $ref: '#/components/responses/SeeOther'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '500':
          $ref: '#/components/responses/InternalServerError'

####################################VIREMENTS####################################
  /virements:
    # request get for the path /virements
    get:
      summary: Récupère la liste des virements d'un utilisateur.
      security:
        - bearerAuth: []
      tags:
        - Virements
      description: Récupère tous les virements liés à cet utilisateur.
 
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    # request post for the path /virements
    post:
      summary: Crée un nouveau virement pour un utilisateur.
      security:
        - bearerAuth: []
      tags:
        - Virements
      description: Crée un nouveau virement pour un utilisateur avec les champs IdCategorie, IdCompteDebit, IdCompteCredit, montant et la dateVirement
 
      requestBody: # specification of the request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                IdCategorie:
                  type: integer
                IdCompteDebit:
                  type: integer
                IdCompteCredit:
                  type: integer
                montant:
                  type: number
                dateVirement:
                  type: string
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '500':
          $ref: '#/components/responses/InternalServerError'
          description: Virement créé.

  /virements/{idVirement}:
  # request get for the path /virements/{idVirement}
    get:
      summary: Récupère un virement par son id.
      security:
        - bearerAuth: []
      tags:
        - Virements
      description: Récupère un virement avec l'id, IdCategorie, IdCompteDebit, IdCompteCredit, montant, dateVirement, dateHeureCreation et dateHeureMAJ.
      parameters: # parameters for the query
        - name: idVirement
          description: Id du virement.
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    # request put for the path /virements/{idVirement}
    put:
      summary: Met à jour un virement.
      security:
        - bearerAuth: []
      tags:
        - Virements
      description: Met à jour un virement avec les champs IdCategorie, IdCompteDebit, IdCompteCredit, montant, dateVirement, dateHeureCreation et dateHeureMAJ.
      parameters: # parameters for the query
        - name: idVirement
          description: Id du virement.
          in: path
          required: true
          schema:
            type: integer
      requestBody: # specification of the request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                montant:
                  type: number
                dateVirement:
                  type: string
        responses:
          '200':
            $ref: '#/components/responses/Success'
          '400':
            $ref: '#/components/responses/BadRequestError'
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '403':
            $ref: '#/components/responses/ForbiddenError'
          '404':
            $ref: '#/components/responses/NotFoundError'
          '406':
            $ref: '#/components/responses/NotAcceptableError'
          '500':
            $ref: '#/components/responses/InternalServerError'

    # request delete for the route /virements/{idVirement}
    delete:
      summary: Supprime un virement.
      security:
        - bearerAuth: []
      tags:
        - Virements
      description: Supprime un virement de la base de donnée grâce à son id.
      parameters: # parameters for the query
        - name: idVirement
          description: Id du virement.
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '204':
          $ref: '#/components/responses/NoContent'
        '303':
          $ref: '#/components/responses/SeeOther'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  ###################################################################################
  # routes pour les catégories
  /categories:
    get:
      summary: Retourne une liste de catégories.
      parameters:
        - name: idCategorie
          description: Identifiant de la catégorie.
          in: query
          required: false
          schema:
            type: integer

      security:
        - bearerAuth: [ ]
      tags:
        - Categories
      description: Retourne une liste de catégories avec les champs idCategorie, nomCategorie, dateHeureCreation et dateHeureMAJ.
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '500':
          $ref: '#/components/responses/InternalServerError'


    post:
      summary: Catégorie.
      security:
        - bearerAuth: [ ]
      tags:
        - Categories
      description: Crée une nouvelle catégorie avec le champ nomCategorie.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nomCategorie:
                  type: string
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '500':
          $ref: '#/components/responses/InternalServerError'     

  /categories/{idCategorie}:
    get:
      summary: Retourne une catégorie par son identifiant.
      security:
        - bearerAuth: [ ]
      tags:
        - Categories
      description: Retourne une catégorie avec les champs idCategorie, nomCategorie, dateHeureCreation et dateHeureMAJ.
      parameters:
        - name: idCategorie
          description: Identifiant de la catégorie.
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '500':
          $ref: '#/components/responses/InternalServerError'


    put:
      summary: Met à jour une catégorie.
      security:
        - bearerAuth: [ ]
      tags:
        - Categories
      description: Met à jour une catégorie avec les champs nomCategorie, dateHeureCreation et dateHeureMAJ.
      parameters:
        - name: idCategorie
          description: Identifiant de la catégorie.
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nomCategorie:
                  type: string
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: Supprime une catégorie.
      security:
        - bearerAuth: [ ]
      tags:
        - Categories
      description: Supprime une catégorie à partir de son identifiant.
      parameters:
        - name: idCategorie
          description: Identifiant de la catégorie.
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '204':
          '$ref': '#/components/responses/NoContent'
        '303':
          $ref: '#/components/responses/SeeOther'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /categories/{idCategorie}/sous-categories:
    get:
      summary: Retourne une liste de sous-catégories.
      parameters:
        - name: idCategorie
          description: Identifiant de la catégorie.
          in: path
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: [ ]
      tags:
        - Sous-categories
      description: Retourne une liste de sous-catégories avec les champs idSousCategorie, nomSousCategorie, idCategorie, dateHeureCreation et dateHeureMAJ.
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '500':
          $ref: '#/components/responses/InternalServerError'


    post:
      summary: Crée une nouvelle sous-catégorie.
      parameters:
        - name: idCategorie
          description: Identifiant de la catégorie
          in: path
          required: true
          schema:
            type: integer

      security:
        - bearerAuth: [ ]
      tags:
        - Sous-categories
      description: Crée une nouvelle sous-catégorie avec les champs nomSousCategorie et idCategorie.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nomSousCategorie:
                  type: string
                idCategorie:
                  type: integer
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '500':
          $ref: '#/components/responses/InternalServerError'


  /categories/{idCategorie}/sous-categories/{idSousCategorie}:
    put:
      summary: Met à jour une sous-catégorie.
      security:
        - bearerAuth: [ ]
      tags:
        - Sous-categories
      description: Met à jour une sous-catégorie avec le champ nomSousCategorie.
      parameters:
        - name: idSousCategorie
          description: Identifiant de la sous-catégorie.
          in: path
          required: true
          schema:
            type: integer
        - name: idCategorie
          description: Identifiant de la catégorie.
          in: path
          required: true
          schema:
            type: integer

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nomSousCategorie:
                  type: string
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '500':
          $ref: '#/components/responses/InternalServerError'


    delete:
      summary: Supprime une sous-catégorie.
      security:
        - bearerAuth: [ ]
      tags:
        - Sous-categories
      description: Supprime une sous-catégorie à partir de son identifiant.
      parameters:
        - name: idSousCategorie
          description: Identifiant de la sous-catégorie.
          in: path
          required: true
          schema:
            type: integer
        - name: idCategorie
          description: Identifiant de la catégorie.
          in: path
          required: true
          schema:
            type: integer

      responses:
        '200':
          $ref: '#/components/responses/Success'
        '204':
          '$ref': '#/components/responses/NoContent'
        '303':
          $ref: '#/components/responses/SeeOther'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  ###################################################################################

  # components
components:
  # schemas definitions
  schemas:    
    # schema for the path/generateTokenTemp
    TokenTemp:
      type: object
      properties:
        token:
          type: string
     # schema for the errors responses
    Error:
      description: Error response
      type: object
      properties:
        code:
          type: string
        message:
          type: string
    
    # schema for the success responses
    Success:
      type: object
      properties:
        message:
          type: string
        data:
          type: object
          additionalProperties: true
      
  # responses
  responses:
   # 200 Success
    Success:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Success'
    # 201 Created
    Created:
      description: Created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Success'
    # 204 No Content
    NoContent:
      description: No Content
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Success'
    # 303 See Other
    SeeOther:
      description: See Other
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Success'     
    # 400 Bad Request
    BadRequestError:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    # 401 Unauthorized
    UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    # 403 Forbidden
    ForbiddenError:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    # 404 Not Found
    NotFoundError:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'  
    # 406 Not Acceptable
    NotAcceptableError:
      description: Not Acceptable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    # 409 Conflict
    ConflictError:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    # 500 Internal Server Error
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  # securitySchemes
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

# security
security:
  - bearerAuth: []
