openapi: '3.0.0'
info:
  version: 1.0.0
  title: Documentation API du projet money
  description: Décrit la structure de l'API du projet money de l'équipe NALT
servers:
    - url: http://localhost:3000/api/v1/
      description: Serveur de développement de l'API
paths:
  # route /generateTokenTemp
  /generateTokenTemp:
    # request post for the path /generateTokenTemp
    post:
      summary: Generate a temporary token to create a user.
      tags:
        - Requests for the path /generateTokenTemp
      description: Generate a temporary token to create a user when no user is present in the database.
      responses:
        200:
          description: Token generated.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TokenTemp'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # route /login
  /login:
    # request post for the path /login
    post:
      summary: Login to the API.
      tags:
        - Requests for the path /login
      description: Login to the API with the name and password.
      requestBody: # specification of the request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                password:
                  type: string
                  format: password

      responses:
        200:
          description: Login successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # route /utilisateurs
  /utilisateurs:
    # request get for the path /utilisateurs
    get:
      summary: Récupère la liste de tous les utilisateurs
      security:
        - bearerAuth: []
      tags:
        - Requetes pour la route /utilisateurs
      description: Retourne la liste des utilisateurs avec l'id, le nom, le prenom, le login, la ville, le code postal et la date de création
      responses:
        200:
          description: Liste des utilisateurs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    # request post for the path /utilisateurs
    post:
      summary: Créé un nouvel utilisateur.
      security:
        - bearerAuth: []
      tags:
        - Requetes pour la route /utilisateurs
      description: Créé un nouvel utilisateur avec le nom, le prenom, le mot de passe, la ville, le code postal et la date de création.
      requestBody: # specification of the request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                password:
                  type: string
                  format: password
                  
      responses:
        201:
          description: Utilisateur créé
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/ConflictError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /utilisateurs/{idUtilisateur}:
    # request get fot the path /utilisateurs/{idUtilisateur}
    get:
      summary: Récupère un utilisateur par son id.
      security:
        - bearerAuth: []
      tags:
        - Requetes pour la route /utilisateurs
      description: Récupère un utilisateur avec l'id, le nom, le prenom, le login, la ville,le code postal et la date de création.
      parameters: # parameters for the query
        - name: idUtilisateur
          description: Id de l'utilisateur.
          in: path
          required: true
          schema:
            type: integer
    
      responses:
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    # request put for the path /utilisateurs/{idUtilisateur}
    put:
      summary: Met à jour les informations d'un utilisateur.
      security:
        - bearerAuth: []
      tags:
        - Requetes pour la route /utilisateurs
      description: Met à jour plusieurs informations d'un utilisateur comme le nom, le prenom, le mot de passe, le login, la ville et le code postal.
      parameters: # parameters for the query
        - name: idUtilisateur
          description: Id de l'utilisateur
          in: path
          required: true
          schema:
            type: integer
        

      requestBody: # specification of the request body
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string

      responses:
        200:
          description: Utilisateur mis à jour
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  
    #request patch for the path /utilisateurs/{idUtilisateur}
    patch:
      summary: Met à jour partiellement les informations d'un utilisateur.
      security:
        - bearerAuth: []
      tags:
        - Requetes pour la route /utilisateurs
      description: Met à jour partiellement les informations d'un utilisateur comme le nom, le prenom, le mot de passe, le login, la ville et le code postal.
      parameters: # parameters for the query
        - name: idUtilisateur
          description: Id de l'utilisateur
          in: path
          required: true
          schema:
            type: integer

      requestBody: # specification of the request body
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string

      responses:
        200:
          description: Utilisateur mis à jour partiellement
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    # request delete for the path /utilisateurs/{idUtilisateur}
    delete:
      summary: Supprime un utilisateur par son id
      security:
        - bearerAuth: []
      tags:
        - Requetes pour la route /utilisateurs
      description: Met à jour partiellement les informations d'un utilisateur comme le nom, le prenom, le mot de passe, le login, la ville et le code postal.
      parameters: # parameters for the query
        - name: idUtilisateur
          description: Id de l'utilisateur
          in: path
          required: true
          schema:
            type: integer

      responses:
        200:
          description: Utilisateur supprimé
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
  # subroute /utilisateurs/{idUtilisateur}/comptes
  /utilisateurs/{idUtilisateur}/comptes:
    # request get for the path /utilisateurs/{idUtilisateur}/comptes
    get:
      summary: Récupère la liste des comptes d'un utilisateur
      parameters: # parameters for the query
        - name: idUtilisateur
          description: Id de l'utilisateur
          in: path
          required: true
          schema:
            type: integer

      security:
        - bearerAuth: []
      tags:
        - Requetes pour la sous-route /utilisateurs/{idUtilisateur}/comptes
      description: Récupère tous les comptes liées à cet utilisateur
      
      responses:
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    # request post for the path /utilisateurs/{idUtilisateur}/comptes
    post:
      summary: Créé un nouveau compte pour un utilisateur.
      parameters: # parameters for the query
        - name: idUtilisateur
          description: Id de l'utilisateur
          in: path
          required: true
          schema:
            type: integer

      security:
        - bearerAuth: []
      tags:
        - Requests for the path /users
      description: Create a new committee with the id, name and createdAt.
      requestBody: # specification of the request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        201:
          description: Committee created.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Committee'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/ConflictError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /utilisateurs/{idUtilisateur}/comptes/{idCompte}:
    # request get for the path /utilisateurs/{idUtilisateur}/comptes/{idCompte}
    get:
      summary: Récupère les information sur le compte d'un utilisateur
      parameters: # parameters for the query
        - name: idUtilisateur
          description: Id de l'utilisateur
          in: path
          required: true
          schema:
            type: integer

        - name: idCompte
          description: Id du compte
          in: path
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      tags:
        - Requests for the path /users
      description: Récupère l'ensemble des informations sur le compte d'un utilisateur (idCompte, descriptionCompte, nomBanque, idUtilisateur, dateHeureCreation,dateHeureMAJ,soldeInitial et dernierSolde).
      responses:
        200:
          description: Compte trouvé.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Committee'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    # request put for the path /utilisateurs/{idUtilisateur}/comptes/{idCompte}
    put:
      summary: Met à jour les informations d'un compte utilisateur.
      security:
        - bearerAuth: []
      tags:
        - Requetes pour la sous-route /utilisateurs/{idUtilisateur}/comptes
      description: Met à jour les informations d'un compte utilisateur (descriptionCompte, nomBanque, soldeInitial et dernierSolde).
      parameters: # parameters for the query
        - name: idUtilisateur
          description: Id de l'utilisateur
          in: path
          required: true
          schema:
            type: integer
       
        - name: idCompte
          description: Id du compte
          in: path
          required: true
          schema:
            type: integer

      requestBody: # specification of the request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        200:
          description: Compte mis à jour.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Committee'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    # request patch for the path /utilisateurs/{idUtilisateur}/comptes
    patch:
      summary: Met à jour partiellement les informations d'un compte utilisateur.
      security:
        - bearerAuth: []
      tags:
        - Requetes pour la sous-route /utilisateurs/{idUtilisateur}/comptes
      description: Met à jour partiellement les informations d'un compte utilisateur (descriptionCompte, nomBanque, soldeInitial et dernierSolde).
      parameters: # parameters for the query
        - name: idUtilisateur
          description: Id de l'utilisateur
          in: path
          required: true
          schema:
            type: integer
       
        - name: idCompte
          description: Id du compte
          in: path
          required: true
          schema:
            type: integer

      requestBody: # specification of the request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        200:
          description: Compte mis à jour partiellement.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Committee'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    # request delete for the path /utilisateurs/{idUtilisateur}/comptes/{idCompte}
    delete:
      summary: Supprime un compte utilisateur.
      security:
        - bearerAuth: []
      tags:
        - Requetes pour la sous-route /utilisateurs/{idUtilisateur}/comptes
      description: Supprime un compte utilisateur de la base de donnée grâce à son id.
      parameters: # parameters for the query
        - name: idUtilisateur
          description: Id de l'utilisateur
          in: path
          required: true
          schema:
            type: integer
       
        - name: idCompte
          description: Id du compte
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Compte supprimé.

###################################Mouvements##################################

  /utilisateurs/{idUtilisateur}/mouvements:
    # request get for the path /utilisateurs/{idUtilisateur}/mouvements
    get:
      summary: Récupère la liste des mouvements d'un utilisateur.
      security:
        - bearerAuth: []
      tags:
        - Requetes pour la sous-route /utilisateurs/{idUtilisateur}/mouvements
      description: Récupère tous les mouvements liées à cet utilisateur.
      parameters: # parameters for the query
        - name: idUtilisateur
          description: Id de l'utilisateur.
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Liste des mouvements.
    
    # request post for the path /utilisateurs/{idUtilisateur}/mouvements
    post:
      summary: Crée un nouveau mouvement pour un utilisateur.
      security:
        - bearerAuth: []
      tags:
        - Requetes pour la sous-route /utilisateurs/{idUtilisateur}/mouvements
      description: Crée un nouveau mouvement pour un utilisateur avec les champs idUtilisateur, idCompte, IdTiers, IdCategorie, idSousCategorie,, typeMouvement, montant, dateHeureCreation et dateHeureMAJ.
      parameters: # parameters for the query
        - name: idUtilisateur
          description: Id de l'utilisateur.
          in: path
          required: true
          schema:
            type: integer
      requestBody: # specification of the request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                typeMouvement:
                  type: string
                montant:
                  type: number
                dateHeureCreation:
                  type: string
                dateHeureMAJ:
                  type: string
      responses:
        201:
          description: Mouvement créé.

  /utilisateurs/{idUtilisateur}/mouvements/{idMouvement}:
    # request get for the path /utilisateurs/{idUtilisateur}/mouvements/{idMouvement}
    get:
      summary: Récupère un mouvement par son id.
      security:
        - bearerAuth: []
      tags:
        - Requetes pour la sous-route /utilisateurs/{idUtilisateur}/mouvements
      description: Récupère un mouvement avec l'id, idCompte, IdTiers, IdCategorie, idSousCategorie, le typeMouvement, le montant, la dateHeureCreation et la dateHeureMAJ.
      parameters: # parameters for the query
        - name: idUtilisateur
          description: Id de l'utilisateur.
          in: path
          required: true
          schema:
            type: integer
        - name: idMouvement
          description: Id du mouvement.
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Mouvement trouvé.

    # request put for the path /utilisateurs/{idUtilisateur}/mouvements/{idMouvement}
    put:
      summary: Met à jour un mouvement.
      security:
        - bearerAuth: []
      tags:
        - Requetes pour la sous-route /utilisateurs/{idUtilisateur}/mouvements
      description: Met à jour un mouvement avec les champs idCompte, IdTiers, IdCategorie, idSousCategorie, typeMouvement, montant, dateHeureCreation et dateHeureMAJ.
      parameters: # parameters for the query
        - name: idUtilisateur
          description: Id de l'utilisateur.
          in: path
          required: true
          schema:
            type: integer
        - name: idMouvement
          description: Id du mouvement.
          in: path
          required: true
          schema:
            type: integer
      requestBody: # specification of the request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                typeMouvement:
                  type: string
                montant:
                  type: number
                dateHeureCreation:
                  type: string
                dateHeureMAJ:
                  type: string
      responses:
        200:
          description: Mouvement mis à jour.

    # request patch for the path /utilisateurs/{idUtilisateur}/mouvements/{idMouvement}
    patch:
      summary: Met à jour partiellement un mouvement.
      security:
        - bearerAuth: []
      tags:
        - Requetes pour la sous-route /utilisateurs/{idUtilisateur}/mouvements
      description: Met à jour partiellement un mouvement avec les champs idCompte, IdTiers, IdCategorie, idSousCategorie, typeMouvement, montant, dateHeureCreation et dateHeureMAJ.
      parameters: # parameters for the query
        - name: idUtilisateur
          description: Id de l'utilisateur.
          in: path
          required: true
          schema:
            type: integer
        - name: idMouvement
          description: Id du mouvement.
          in: path
          required: true
          schema:
            type: integer
      requestBody: # specification of the request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                typeMouvement:
                  type: string
                montant:
                  type: number
                dateHeureCreation:
                  type: string
                dateHeureMAJ:
                  type: string
      responses:
        200:
          description: Mouvement mis à jour partiellement.

    # request delete for the path /utilisateurs/{idUtilisateur}/mouvements/{idMouvement}
    delete:
      summary: Supprime un mouvement.
      security:
        - bearerAuth: []
      tags:
        - Requetes pour la sous-route /utilisateurs/{idUtilisateur}/mouvements
      description: Supprime un mouvement de la base de donnée grâce à son id.
      parameters: # parameters for the query
        - name: idUtilisateur
          description: Id de l'utilisateur.
          in: path
          required: true
          schema:
            type: integer
        - name: idMouvement
          description: Id du mouvement.
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Mouvement supprimé.

  /utilisateurs/{idUtilisateur}/comptes/{idCompte}/mouvements:
    # request get for the path /utilisateurs/{idUtilisateur}/comptes/{idCompte}/mouvements
    get:
      summary: Récupère la liste des mouvements d'un compte utilisateur.
      security:
        - bearerAuth: []
      tags:
        - Requetes pour la sous-route /utilisateurs/{idUtilisateur}/comptes/{idCompte}/mouvements
      description: Récupère tous les mouvements liées à ce compte utilisateur.
      parameters: # parameters for the query
        - name: idUtilisateur
          description: Id de l'utilisateur.
          in: path
          required: true
          schema:
            type: integer
        - name: idCompte
          description: Id du compte.
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Liste des mouvements du compte.

##################################TIERS##################################
  /utilisateurs{idUtilisateur}/tiers:
    #resquest get for the path /utilisateurs/{idUtilisateur}/tiers
    get:
      summary: Récupère la liste des tiers d'un utilisateur.
      security:
        - bearerAuth: []
      tags:
        - Requetes pour la sous-route /utilisateurs/{idUtilisateur}/tiers
      description: Récupère tous les tiers liés à cet utilisateur.
      parameters: # parameters for the query
        - name: idUtilisateur
          description: Id de l'utilisateur.
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Liste des tiers de l'utilisateur.

    # request post for the path /utilisateurs/{idUtilisateur}/tiers
    post:
      summary: Crée un nouveau tiers pour un utilisateur.
      security:
        - bearerAuth: []
      tags:
        - Requetes pour la sous-route /utilisateurs/{idUtilisateur}/tiers
      description: Crée un nouveau tiers pour un utilisateur avec les champs idUtilisateur, nomTiers, dateHeureCreation et dateHeureMAJ.
      parameters: # parameters for the query
        - name: idUtilisateur
          description: Id de l'utilisateur.
          in: path
          required: true
          schema:
            type: integer
      requestBody: # specification of the request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nomTiers:
                  type: string
                dateHeureCreation:
                  type: string
                dateHeureMAJ:
                  type: string
      responses:
        201:
          description: Tiers créé.

  /utilisateurs/{idUtilisateur}/tiers/{idTiers}:
    # request get for the path /utilisateurs/{idUtilisateur}/tiers/{idTiers}
    get:
      summary: Récupère un tiers par son id.
      security:
        - bearerAuth: []
      tags:
        - Requetes pour la sous-route /utilisateurs/{idUtilisateur}/tiers
      description: Récupère un tiers avec l'id, nomTiers, dateHeureCreation et dateHeureMAJ.
      parameters: # parameters for the query
        - name: idUtilisateur
          description: Id de l'utilisateur.
          in: path
          required: true
          schema:
            type: integer
        - name: idTiers
          description: Id du tiers.
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Tiers trouvé.

    # request put for the path /utilisateurs/{idUtilisateur}/tiers/{idTiers}
    put:
      summary: Met à jour un tiers.
      security:
        - bearerAuth: []
      tags:
        - Requetes pour la sous-route /utilisateurs/{idUtilisateur}/tiers
      description: Met à jour un tiers avec les champs nomTiers, dateHeureCreation et dateHeureMAJ.
      parameters: # parameters for the query
        - name: idUtilisateur
          description: Id de l'utilisateur.
          in: path
          required: true
          schema:
            type: integer
        - name: idTiers
          description: Id du tiers.
          in: path
          required: true
          schema:
            type: integer
      requestBody: # specification of the request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nomTiers:
                  type: string
                dateHeureCreation:
                  type: string
                dateHeureMAJ:
                  type: string
      responses:
        200:
          description: Tiers mis à jour.
    
    # request delete for the path /utilisateurs/{idUtilisateur}/tiers/{idTiers}
    delete:
      summary: Supprime un tiers.
      security:
        - bearerAuth: []
      tags:
        - Requetes pour la sous-route /utilisateurs/{idUtilisateur}/tiers
      description: Supprime un tiers de la base de donnée grâce à son id.
      parameters: # parameters for the query
        - name: idUtilisateur
          description: Id de l'utilisateur.
          in: path
          required: true
          schema:
            type: integer
        - name: idTiers
          description: Id du tiers.
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Tiers supprimé.

####################################VIREMENTS####################################
  /utilisateurs/{idUtilisateur}/virements:
    # request get for the path /utilisateurs/{idUtilisateur}/virements
    get:
      summary: Récupère la liste des virements d'un utilisateur.
      security:
        - bearerAuth: []
      tags:
        - Requetes pour la sous-route /utilisateurs/{idUtilisateur}/virements
      description: Récupère tous les virements liés à cet utilisateur.
      parameters: # parameters for the query
        - name: idUtilisateur
          description: Id de l'utilisateur.
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Liste des virements de l'utilisateur.

    # request post for the path /utilisateurs/{idUtilisateur}/virements
    post:
      summary: Crée un nouveau virement pour un utilisateur.
      security:
        - bearerAuth: []
      tags:
        - Requetes pour la sous-route /utilisateurs/{idUtilisateur}/virements
      description: Crée un nouveau virement pour un utilisateur avec les champs IdCategorie, IdCompteDebit, IdCompteCredit, montant,dateVirement, dateHeureCreation et dateHeureMAJ.
      parameters: # parameters for the query
        - name: idUtilisateur
          description: Id de l'utilisateur.
          in: path
          required: true
          schema:
            type: integer
      requestBody: # specification of the request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                IdCategorie:
                  type: integer
                IdCompteDebit:
                  type: integer
                IdCompteCredit:
                  type: integer
                montant:
                  type: number
                dateVirement:
                  type: string
                dateHeureCreation:
                  type: string
                dateHeureMAJ:
                  type: string
      responses:
        201:
          description: Virement créé.

  /utilisateurs/{idUtilisateur}/virements/{idVirement}:
  # request get for the path /utilisateurs/{idUtilisateur}/virements/{idVirement}
    get:
      summary: Récupère un virement par son id.
      security:
        - bearerAuth: []
      tags:
        - Requetes pour la sous-route /utilisateurs/{idUtilisateur}/virements
      description: Récupère un virement avec l'id, IdCategorie, IdCompteDebit, IdCompteCredit, montant, dateVirement, dateHeureCreation et dateHeureMAJ.
      parameters: # parameters for the query
        - name: idUtilisateur
          description: Id de l'utilisateur.
          in: path
          required: true
          schema:
            type: integer
        - name: idVirement
          description: Id du virement.
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Virement trouvé.

    # request put for the path /utilisateurs/{idUtilisateur}/virements/{idVirement}
    put:
      summary: Met à jour un virement.
      security:
        - bearerAuth: []
      tags:
        - Requetes pour la sous-route /utilisateurs/{idUtilisateur}/virements
      description: Met à jour un virement avec les champs IdCategorie, IdCompteDebit, IdCompteCredit, montant, dateVirement, dateHeureCreation et dateHeureMAJ.
      parameters: # parameters for the query
        - name: idUtilisateur
          description: Id de l'utilisateur.
          in: path
          required: true
          schema:
            type: integer
        - name: idVirement
          description: Id du virement.
          in: path
          required: true
          schema:
            type: integer
      requestBody: # specification of the request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                IdCategorie:
                  type: integer
                IdCompteDebit:
                  type: integer
                IdCompteCredit:
                  type: integer
                montant:
                  type: number
                dateVirement:
                  type: string
                dateHeureCreation:
                  type: string
                dateHeureMAJ:
                  type: string
      responses:
        200:
          description: Virement mis à jour.

    # request delete for the route /utilisateurs/{idUtilisateur}/virements/{idVirement}
    delete:
      summary: Supprime un virement.
      security:
        - bearerAuth: []
      tags:
        - Requetes pour la sous-route /utilisateurs/{idUtilisateur}/virements
      description: Supprime un virement de la base de donnée grâce à son id.
      parameters: # parameters for the query
        - name: idUtilisateur
          description: Id de l'utilisateur.
          in: path
          required: true
          schema:
            type: integer
        - name: idVirement
          description: Id du virement.
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Virement supprimé.


  ###################################################################################
  # routes pour les catégories
  /categories:
    get:
      summary: Retourne une liste de catégories.
      parameters:
        - name: idCategorie
          description: Identifiant de la catégorie.
          in: query
          required: false
          schema:
            type: integer

      security:
        - bearerAuth: [ ]
      tags:
        - Requêtes pour le chemin /categories
      description: Retourne une liste de catégories avec les champs idCategorie, nomCategorie, dateHeureCreation et dateHeureMAJ.
      responses:
        200:
          description: Un tableau de catégories.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Card'
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
        '500': { $ref: '#/components/responses/InternalServerError' }

    post:
      summary: Crée une nouvelle catégorie.
      security:
        - bearerAuth: [ ]
      tags:
        - Requêtes pour le chemin /categories
      description: Crée une nouvelle catégorie avec les champs nomCategorie, dateHeureCreation et dateHeureMAJ.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nomCategorie:
                  type: string
                dateHeureCreation:
                  type: string
                dateHeureMAJ:
                  type: string
      responses:
        201:
          description: Catégorie créée.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
        '409': { $ref: '#/components/responses/ConflictError' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  /categories/{idCategorie}:
    get:
      summary: Retourne une catégorie par son identifiant.
      security:
        - bearerAuth: [ ]
      tags:
        - Requêtes pour le chemin /categories
      description: Retourne une catégorie avec les champs idCategorie, nomCategorie, dateHeureCreation et dateHeureMAJ.
      parameters:
        - name: idCategorie
          description: Identifiant de la catégorie.
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Catégorie trouvée.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
        '500': { $ref: '#/components/responses/InternalServerError' }

    put:
      summary: Met à jour une catégorie.
      security:
        - bearerAuth: [ ]
      tags:
        - Requêtes pour le chemin /categories
      description: Met à jour une catégorie avec les champs nomCategorie, dateHeureCreation et dateHeureMAJ.
      parameters:
        - name: idCategorie
          description: Identifiant de la catégorie.
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nomCategorie:
                  type: string
                dateHeureCreation:
                  type: string
                dateHeureMAJ:
                  type: string
      responses:
        200:
          description: Catégorie mise à jour.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
        '500': { $ref: '#/components/responses/InternalServerError' }

    delete:
      summary: Supprime une catégorie.
      security:
        - bearerAuth: [ ]
      tags:
        - Requêtes pour le chemin /categories
      description: Supprime une catégorie à partir de son identifiant.
      parameters:
        - name: idCategorie
          description: Identifiant de la catégorie.
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Catégorie supprimée.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  /categories/{idCategorie}/sous-categories:
    get:
      summary: Retourne une liste de sous-catégories.
      parameters:
        - name: idCategorie
          description: Identifiant de la catégorie.
          in: path
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: [ ]
      tags:
        - Requêtes pour le chemin /sous-categories
      description: Retourne une liste de sous-catégories avec les champs idSousCategorie, name, createdAt et updatedAt.
      responses:
        200:
          description: Un tableau de sous-catégories.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Card'
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
        '500': { $ref: '#/components/responses/InternalServerError' }

    post:
      summary: Crée une nouvelle sous-catégorie.
      parameters:
        - name: idCategorie
          description: Identifiant de la catégorie.
          in: path
          required: true
          schema:
            type: integer

      security:
        - bearerAuth: [ ]
      tags:
        - Requêtes pour le chemin /sous-categories
      description: Crée une nouvelle sous-catégorie avec les champs name, createdAt et updatedAt.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                createdAt:
                  type: string
                updatedAt:
                  type: string
      responses:
        201:
          description: Sous-catégorie créée.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
        '409': { $ref: '#/components/responses/ConflictError' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  /categories/{idCategorie}/sous-categories/{idSousCategorie}:
    put:
      summary: Met à jour une sous-catégorie.
      security:
        - bearerAuth: [ ]
      tags:
        - Requêtes pour le chemin /categories/{idCategorie}/sous-categories/{idSousCategorie}
      description: Met à jour une sous-catégorie avec les champs name, createdAt et updatedAt.
      parameters:
        - name: idSousCategorie
          description: Identifiant de la sous-catégorie.
          in: path
          required: true
          schema:
            type: integer
        - name: idCategorie
          description: Identifiant de la catégorie.
          in: path
          required: true
          schema:
            type: integer

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                createdAt:
                  type: string
                updatedAt:
                  type: string
      responses:
        200:
          description: Sous-catégorie mise à jour.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
        '500': { $ref: '#/components/responses/InternalServerError' }

    delete:
      summary: Supprime une sous-catégorie.
      security:
        - bearerAuth: [ ]
      description: Supprime une sous-catégorie à partir de son identifiant.
      parameters:
        - name: idSousCategorie
          description: Identifiant de la sous-catégorie.
          in: path
          required: true
          schema:
            type: integer
        - name: idCategorie
          description: Identifiant de la catégorie.
          in: path
          required: true
          schema:
            type: integer

      responses:
        200:
          description: Sous-catégorie supprimée.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
        '500': { $ref: '#/components/responses/InternalServerError' }
  ###################################################################################

  # components
components:
  # schemas definitions
  schemas:    
    # schema for the path/generateTokenTemp
    TokenTemp:
      type: object
      properties:
        token:
          type: string

    # schema for the path/users
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        card:
          type: array
          items:
            $ref: '#/components/schemas/Card'
    
     # schema for the errors responses
    Error:
      description: Error response
      type: object
      properties:
        code:
          type: string
        message:
          type: string

  # responses
  responses:
    # 400 Bad Request
    BadRequestError:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    # 401 Unauthorized
    UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    # 403 Forbidden
    ForbiddenError:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    # 404 Not Found
    NotFoundError:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'  
    # 409 Conflict
    ConflictError:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    # 500 Internal Server Error
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  # securitySchemes
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

# security
security:
  - bearerAuth: []
